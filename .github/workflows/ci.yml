name: CI

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          cd web-app
          pipenv install --deploy --system

      - name: Wait for MongoDB to start
        run: sleep 20

      - name: Test connection to MongoDB
        run: |
          docker exec $(docker ps -q --filter ancestor=mongo) mongosh --eval "db.runCommand({ping: 1})" --username admin --password password

      - name: Test with web-app using pytest
        run: |
          cd web-app
          pipenv install pytest
          pipenv run pytest

      - name: Display MongoDB logs on failure
        if: failure()
        run: |
          CONTAINER_ID=$(docker ps -q --filter ancestor=mongo)
          if [ -n "$CONTAINER_ID" ]; then
            echo "Displaying MongoDB container logs:"
            docker logs $CONTAINER_ID
          else
            echo "MongoDB container is not running or failed to start."
            echo "Showing all containers for debugging:"
            docker ps -a
          fi

      - name: Display Docker logs
        if: failure()
        run: |
          echo "Docker Service Logs:"
          sudo journalctl -u docker --since "1 hour ago" | tail -n 100



